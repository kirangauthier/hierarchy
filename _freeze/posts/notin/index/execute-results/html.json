{
  "hash": "af64b2a09f5e5a53e9382d0c80a7a50e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"`%notin%`\"\nauthor: \"Kiran Gauthier\"\ndate: \"2024-05-25\"\ncategories: [R, useful tricks]\nimage: \"assets/PalmerStation_chinstrap-penguins_photoby_DonnaPatterson.jpg\"\n---\n\n\n## Negating the `%in%` operator\n\nI find the base [`%in%`](https://stat.ethz.ch/R-manual/R-devel/library/base/html/match.html) operator to be super useful to keep code readable in `R`, but sometimes I want everything **but** what I specify in my `dplyr::filter` call.\n\nThankfully, there's a really nice way to do it by making use of the `Negate()` function. Here's the code to run it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages({\n  library(tidyverse)\n})\n\n`%notin%` <- Negate(`%in%`)\n```\n:::\n\n\n### `%notin%` with the Palmer archipelago penguins\n\nLet's try it out!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages({\n  library(magrittr)\n\n  library(palmerpenguins)\n})\ndata(package = 'palmerpenguins')\n\n## get the head of the df\npenguins %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n\n```{.r .cell-code}\n## get the first three colors from the Tableau10 palette\ntab10_colors <- c(\"#4E79A7\", \"#F28E2B\", \"#E15759\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## print the unique islands\npenguins %$%\n  unique(island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Torgersen Biscoe    Dream    \nLevels: Biscoe Dream Torgersen\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## check the %in% operator\npenguins %>%\n\n  filter(island %in% c('Biscoe', 'Torgersen')) %>%\n\n  select(species, island, bill_length_mm, bill_depth_mm, year) %>%\n  ggplot(aes(x = bill_depth_mm, y = bill_length_mm, color = island)) +\n  geom_point(size=3) +\n  scale_color_manual(values = c(\"Biscoe\" = tab10_colors[1], \"Torgersen\" = tab10_colors[2])) +\n  labs(\n    title = \"bill depth vs bill width\",\n    subtitle = \"on Biscoe and Torgersen islands\",\n    x = \"bill depth (mm)\",\n    y = \"bill width (mm)\",\n    color = \"island\"\n  ) +\n  theme_classic(base_size = 14) +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    legend.position = \"top\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=576}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## check the %notin% operator\npenguins %>%\n\n  filter(island %notin% c('Biscoe', 'Torgersen')) %>%\n\n  select(species, island, bill_length_mm, bill_depth_mm, year) %>%\n  ggplot(aes(x = bill_depth_mm, y = bill_length_mm, color = island)) +\n  geom_point(size=3) +\n  scale_color_manual(values = c(\"Dream\" = tab10_colors[3])) +\n  labs(\n    title = \"bill depth vs bill width\",\n    subtitle = \"**not** on Biscoe and Torgersen islands\",\n    x = \"bill depth (mm)\",\n    y = \"bill width (mm)\",\n    color = \"island\"\n  ) +\n  theme_classic(base_size = 14) +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    plot.subtitle = element_text(hjust = 0.5),\n    legend.position = \"top\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=576}\n:::\n:::\n\n\n### Existing implementations\n\nAfter searching around, it seems like `Hmisc::%nin%`, and `operators::%!in%` libraries also replicate this functionality, but I still think it's a cool example of reversing the behaviour of base functions using `Negate()`.\n\n## Citations\n\nThumbnail photo from [Donna Patterson](https://www.nsf.gov/news/mmg/media/images/PalmerStation_chinstrap-penguins_photoby_DonnaPatterson.jpg) hosted on the NSF website.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}